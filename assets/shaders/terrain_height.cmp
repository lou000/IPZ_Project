#version 430
layout(local_size_x = 16, local_size_y = 16) in;


struct MeshVertex{
    vec4 position;
    vec4 normal;
    vec2 texCoords;
};

layout (std430, binding = 0) buffer TerrainVertexBuffer
{
    MeshVertex vertices[];
};
vec2 meshSize = vec2(10, 10);
layout(binding = 0) uniform sampler2DArray noiseTexture;

void main()
{
    vec2 pos0 = gl_GlobalInvocationID.xy;
    vec2 pos1 = pos0; pos1.x  += 1;
    vec2 pos2 = pos0; pos2.xy += 1;
    vec2 pos3 = pos0; pos1.y  += 1;

    vec2 resolution = textureSize(noiseTexture, 0).xy;
    

    vertices[0].position.y = (texture(noiseTexture, vec3(pos3/resolution, 0)).r)*5;
    vertices[int(pos0.y*meshSize.y+pos0.x)*6+2].position.y = (texture(noiseTexture, vec3(pos0/resolution, 0)).r);
    vertices[int(pos0.y*meshSize.y+pos0.x)*6+3].position.y = (texture(noiseTexture, vec3(pos0/resolution, 0)).r);
    vertices[int(pos0.y*meshSize.y+pos0.x)*6+1].position.y = (texture(noiseTexture, vec3(pos2/resolution, 0)).r);
    vertices[int(pos0.y*meshSize.y+pos0.x)*6+4].position.y = (texture(noiseTexture, vec3(pos1/resolution, 0)).r);
    vertices[int(pos0.y*meshSize.y+pos0.x)*6+5].position.y = (texture(noiseTexture, vec3(pos2/resolution, 0)).r);
}