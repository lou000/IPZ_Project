#version 430
layout(local_size_x = 32, local_size_y = 32) in;

layout(r11f_g11f_b10f, binding = 0) uniform image2D output_image;
layout(binding = 1) uniform sampler2D low_res_depth;
layout(binding = 2) uniform sampler2D high_res_depth;
layout(binding = 3) uniform sampler2D volumetric_light;

vec2 posToUV(ivec2 pos, ivec2 resolution)
{
    return (vec2(pos))/vec2(resolution);
}

void main()
{

    ivec2 resolution = imageSize(output_image);
    vec2 texelSize = 1/resolution;

    ivec2 pos = ivec2(gl_WorkGroupID.xy*gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);

    int xOffset = pos.x % 2 == 0 ? -1 : 1;
    int yOffset = pos.y % 2 == 0 ? -1 : 1;

    ivec2 offsets[] = 
    {ivec2(0, 0), ivec2(0, yOffset),
    ivec2(xOffset, 0), ivec2(xOffset, yOffset)};

    float highResDepth = texture(high_res_depth, posToUV(pos, resolution), 0).r;
    vec3 color = vec3(0);
    float totalWeight = 0;
    for(int i=0; i<4; i++)
    {
        vec3 downscaledColor = texture(volumetric_light, posToUV(pos+offsets[i], resolution), 0).rgb;
        float lowResDepth = texture(low_res_depth, posToUV(pos+offsets[i], resolution), 0).r;
        
        float currentWeight = 1.0;
        currentWeight *= max(0.0, 1.0 - (0.05) * abs(lowResDepth - highResDepth));

        color += downscaledColor * currentWeight;
        totalWeight += currentWeight;
    }

    vec3 outColor = color/(totalWeight+0.0001);
    
    imageStore(output_image, ivec2(gl_GlobalInvocationID), vec4(outColor, 1));

}