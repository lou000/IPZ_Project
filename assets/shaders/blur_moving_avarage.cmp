
#version 430

layout(local_size_x = 32) in;
layout(r16f, binding = 0) uniform image2D in_image;
layout(r16f, binding = 1) uniform image2D out_image;

uniform int horizontal;

int cKernelSize           = 11; // added on the cpp side
int cKernelHalfDist       = cKernelSize/2;
float recKernelSize       = 1.0 / float(cKernelSize);

void blurHorizontal()
{
    int y = int(gl_GlobalInvocationID.x);
    
    // avoid processing pixels that are out of texture dimensions!
    vec2 resolution = imageSize(in_image);
    if( y >= (resolution.y) ) return;

    vec3 colourSum = imageLoad( in_image, ivec2( 0, y ) ).xyz * float(cKernelHalfDist);
    for( int x = 0; x <= cKernelHalfDist; x++ )
        colourSum += imageLoad( in_image, ivec2( x, y ) ).xyz;

    for( int x = 0; x < resolution.x; x++ )
    {
        imageStore( out_image, ivec2( x, y ), vec4( colourSum * recKernelSize, 1.0 ) );

        // move window to the next 
        vec3 leftBorder     = imageLoad( in_image, ivec2( max( x-cKernelHalfDist, 0 ), y ) ).xyz;
        vec3 rightBorder    = imageLoad( in_image, ivec2( min( x+cKernelHalfDist+1, resolution.x-1 ), y ) ).xyz;

        colourSum -= leftBorder;
        colourSum += rightBorder;
    }
}

void blurVertical()
{
        // x and y are swapped for vertical

    int y = int(gl_GlobalInvocationID.x);

    // avoid processing pixels that are out of texture dimensions!
    vec2 resolution = imageSize(in_image);
    if( y >= resolution.x ) return;

    vec3 colourSum = imageLoad( in_image, ivec2( y, 0 ) ).xyz * float(cKernelHalfDist);
    for( int x = 0; x <= cKernelHalfDist; x++ )
        colourSum += imageLoad( in_image, ivec2( y, x ) ).xyz;
    
    for( int x = 0; x < resolution.y; x++ )
    {
        imageStore( out_image, ivec2( y, x ), vec4( colourSum * recKernelSize, 1.0 ) );
    
        // move window to the next 
        vec3 leftBorder     = imageLoad( in_image, ivec2( y, max( x-cKernelHalfDist, 0 ) ) ).xyz;
        vec3 rightBorder    = imageLoad( in_image, ivec2( y, min( x+cKernelHalfDist+1, resolution.y-1 ) ) ).xyz;
    
        colourSum -= leftBorder;
        colourSum += rightBorder;
    }
}

void main()
{
    if(horizontal==1)
        blurHorizontal();
    else
        blurVertical();
}